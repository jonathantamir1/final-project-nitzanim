pipeline {
    agent any
    
    environment {
        AWS_REGION = 'us-west-2'
        EKS_CLUSTER_NAME = 'status-page-prod-cluster'
        ECR_REPOSITORY = 'status-page-app'
        ECR_REGISTRY = '123456789012.dkr.ecr.us-west-2.amazonaws.com'
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
        DOCKER_IMAGE = "${ECR_REGISTRY}/${ECR_REPOSITORY}:${BUILD_NUMBER}"
        DOCKER_IMAGE_LATEST = "${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
    }
    
    options {
        timeout(time: 30, unit: 'MINUTES')
        retry(2)
        timestamps()
        ansiColor('xterm')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                }
            }
        }
        
        stage('Code Quality') {
            parallel {
                stage('Linting') {
                    steps {
                        sh '''
                            echo "Running Python linting..."
                            docker run --rm -v $(pwd):/app python:3.10 bash -c "
                                cd /app && 
                                pip install -r requirements.txt && 
                                python -m flake8 --max-line-length=120 --exclude=venv,env,migrations .
                            "
                        '''
                    }
                }
                stage('Security Scan') {
                    steps {
                        sh '''
                            echo "Running security scan..."
                            docker run --rm -v $(pwd):/app securecodewarrior/docker-security-scan
                        '''
                    }
                }
                stage('Unit Tests') {
                    steps {
                        sh '''
                            echo "Running unit tests..."
                            docker run --rm -v $(pwd):/app python:3.10 bash -c "
                                cd /app && 
                                pip install -r requirements.txt && 
                                python manage.py test --verbosity=2
                            "
                        '''
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image: ${DOCKER_IMAGE}"
                    sh '''
                        docker build -t ${DOCKER_IMAGE} -t ${DOCKER_IMAGE_LATEST} -f docker/Dockerfile .
                    '''
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                script {
                    echo "Pushing Docker image to ECR..."
                    sh '''
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                        docker push ${DOCKER_IMAGE}
                        docker push ${DOCKER_IMAGE_LATEST}
                    '''
                }
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                script {
                    echo "Deploying to EKS cluster: ${EKS_CLUSTER_NAME}"
                    sh '''
                        aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER_NAME}
                        
                        # Update image in deployment
                        kubectl set image deployment/status-page-app status-page=${DOCKER_IMAGE} -n status-page
                        
                        # Wait for rollout to complete
                        kubectl rollout status deployment/status-page-app -n status-page --timeout=300s
                        
                        # Verify deployment
                        kubectl get pods -l app=status-page -n status-page
                        kubectl get services -n status-page
                    '''
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    echo "Performing health check..."
                    sh '''
                        # Get the service endpoint
                        SERVICE_IP=$(kubectl get service status-page-service -n status-page -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
                        
                        if [ -n "$SERVICE_IP" ]; then
                            echo "Service IP: $SERVICE_IP"
                            # Wait for service to be ready
                            sleep 30
                            # Perform health check
                            curl -f http://$SERVICE_IP/health/ || exit 1
                        else
                            echo "Service IP not found, checking cluster IP..."
                            kubectl get service status-page-service -n status-page
                        fi
                    '''
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                script {
                    echo "Cleaning up old images..."
                    sh '''
                        # Remove local Docker images to save space
                        docker rmi ${DOCKER_IMAGE} ${DOCKER_IMAGE_LATEST} || true
                        
                        # Clean up dangling images
                        docker image prune -f
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "Pipeline completed with status: ${currentBuild.result ?: 'SUCCESS'}"
            }
        }
        success {
            script {
                echo "✅ Deployment successful!"
                // Send success notification
                slackSend(
                    channel: '#devops',
                    color: 'good',
                    message: "✅ Status Page deployment successful!\n" +
                            "Build: ${BUILD_NUMBER}\n" +
                            "Commit: ${env.GIT_COMMIT_SHORT}\n" +
                            "Image: ${DOCKER_IMAGE}\n" +
                            "URL: https://status.yourdomain.com"
                )
            }
        }
        failure {
            script {
                echo "❌ Deployment failed!"
                // Send failure notification
                slackSend(
                    channel: '#devops',
                    color: 'danger',
                    message: "❌ Status Page deployment failed!\n" +
                            "Build: ${BUILD_NUMBER}\n" +
                            "Commit: ${env.GIT_COMMIT_SHORT}\n" +
                            "Logs: ${BUILD_URL}console"
                )
            }
        }
        unstable {
            script {
                echo "⚠️ Deployment unstable!"
                // Send unstable notification
                slackSend(
                    channel: '#devops',
                    color: 'warning',
                    message: "⚠️ Status Page deployment unstable!\n" +
                            "Build: ${BUILD_NUMBER}\n" +
                            "Commit: ${env.GIT_COMMIT_SHORT}\n" +
                            "Logs: ${BUILD_URL}console"
                )
            }
        }
    }
}
